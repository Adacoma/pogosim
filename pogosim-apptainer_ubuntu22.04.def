Bootstrap: docker
From: ubuntu:22.04

%labels
    Author leo.cazenille@gmail.com
    Version 0.1.0

%arguments
   USE_CLANG="false"

%environment
    export LC_ALL=C.UTF-8
    export LANG=C.UTF-8
    export DEBIAN_FRONTEND=noninteractive
    export CMAKE_MODULE_PATH="/opt/pogosim/cmake/modules"
    export LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH"
    export PATH="/usr/local/bin:$PATH:/pogobot-sdk/tools/riscv64-unknown-elf-gcc-10.1.0-2020.08.2-x86_64-linux-ubuntu14/bin"
    export NPROC=$(  grep -i "^processor" /proc/cpuinfo | wc -l )

%files
    # Copy project source files to the container
    ./build.sh /opt/pogosim/
    ./CMakeLists.txt /opt/pogosim/
    ./src /opt/pogosim/src
    ./cmake /opt/pogosim/cmake
    ./fonts /opt/pogosim/fonts
    ./arenas /opt/pogosim/arenas
    ./scripts /opt/pogosim/scripts
    ./README.md /opt/pogosim/README.md

    # Copy CMakeLists.txt to the container
    ./CMakeLists.txt /opt/pogosim/CMakeLists.txt


%post
    export DEBIAN_FRONTEND=noninteractive

    echo 'Acquire::Retries "10";' > /etc/apt/apt.conf.d/80-retries
    # Update and install required packages
    apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        software-properties-common \
        gpg-agent \
        cmake \
        git \
        libboost-system-dev \
        libsdl2-dev \
        libsdl2-image-dev \
        libsdl2-gfx-dev \
        libsdl2-ttf-dev \
        libyaml-cpp-dev \
        libspdlog-dev \
        wget \
        unzip \
        ca-certificates lsb-release

    #add-apt-repository ppa:ubuntu-toolchain-r/ppa -y
    add-apt-repository ppa:ubuntu-toolchain-r/test -y
    apt-get install -y --no-install-recommends gcc-13 g++-13
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100 --slave /usr/bin/g++ g++ /usr/bin/g++-13 --slave /usr/bin/gcov gcov /usr/bin/gcov-13

    # Install Apache Arrow
    wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
    apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
    apt update && apt install -y -V libarrow-dev

    # Install clang if USE_CLANG is true
    if [ {{ USE_CLANG }} = "true" ]; then
        apt-get install -y --no-install-recommends clang
        update-alternatives --install /usr/bin/cc cc /usr/bin/clang 100
        update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 100
    fi

    # Install Box2D 3.x
    git clone https://github.com/erincatto/box2d.git
    cd box2d
    git checkout 28adacf82377d4113f2ed00586141463244b9d10       # This commit compiles fine
    mkdir build
    cd build
    cmake -DBOX2D_BUILD_DOCS=OFF -DGLFW_BUILD_WAYLAND=OFF    -DCMAKE_INSTALL_PREFIX=/usr  ..
    cmake --build .
    make install
    cd ../..

    # Create a working directory
    mkdir -p /opt/pogosim
    cd /opt/pogosim

    # Compile and install
    /opt/pogosim/build.sh


    # Required to compile pogobot binaries
    apt-get -y install wget bison build-essential clang clang-format cmake flex gawk git graphviz libboost-all-dev libboost-dev libboost-filesystem-dev libboost-iostreams-dev libboost-program-options-dev libboost-python-dev libboost-system-dev libboost-thread-dev libeigen3-dev libffi-dev libftdi-dev libreadline-dev mercurial pkg-config python3 python3-dev python3-pip python3-setuptools tcl-dev xdot zlib1g-dev
    rm -f /usr/lib/python3.*/EXTERNALLY-MANAGED
    pip3 install meson==0.64.1 ninja

    # Install last version of pogobatch
    cd /opt/pogosim/scripts
    python3 setup.py sdist bdist_wheel
    pip3 install -U .

    cd /
    git clone https://github.com/leo-cazenille/pogobot-sdk.git
    cd /pogobot-sdk
    mkdir -p dependencies

    # Litex
    mkdir -p dependencies/litex
    cd dependencies/litex
    wget https://raw.githubusercontent.com/enjoy-digital/litex/master/litex_setup.py
    chmod +x litex_setup.py
    ./litex_setup.py init
    cat ../../tools/litex_version.txt | awk '{ if(!system("test -d " $1)) {system("git -C " $1 " checkout " $3)}}'
    rm -f /usr/lib/python3.*/EXTERNALLY-MANAGED
    ./litex_setup.py install
    cd ../..

    # Cross compiler gcc
    cd tools
    wget https://static.dev.sifive.com/dev-tools/freedom-tools/v2020.08/riscv64-unknown-elf-gcc-10.1.0-2020.08.2-x86_64-linux-ubuntu14.tar.gz
    tar xvf riscv64-unknown-elf-gcc-10.1.0-2020.08.2-x86_64-linux-ubuntu14.tar.gz

    # Clean apt cache
    apt-get clean && rm -rf /var/lib/apt/lists/*


