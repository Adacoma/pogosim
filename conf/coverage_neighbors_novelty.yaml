---

window_width: 600       # In pixels
window_height: 600      # In pixels

#arena_file: arenas/square.csv
arena_file: arenas/disk.csv
#arena_file: arenas/arena8.csv
#arena_file: arenas/star.csv
arena_surface: 1.0e6    # In mm²

delete_old_files: true
enable_data_logging: true
data_filename: "frames/data.feather"
enable_console_logging: true
console_filename: "frames/console.txt"
save_data_period: 1.0       # In s, or -1 to disable data export (see also "enable_data_logging")
save_video_period: 1.0      # In s, or -1 to disable frame export
frames_name: "frames/f{:010.4f}.png"

seed: 0
show_communication_channels: false  # In the GUI, can enabled/disabled using F5
show_communication_channels_above_all: false # Flag indicating if the communication channels must be drawn above the objects (true) or below. Can be enabled/disabled using F5
show_lateral_LEDs: false             # In the GUI, can enabled/disabled using F6
show_light_levels: false            # In the GUI, can enabled/disabled using F6
GUI: true

# Time
simulation_time: 5000.0     # In s
time_step: 0.01            # In s
GUI_speed_up: 10.0         # How much the visualisation in the GUI should be sped up

# The initial positions of the robot, set as a formation.
# "initial_formation" can be:
#   - "random": all robots are placed randomly in the arena, with random direction,
#   - "aligned_random": all robots are placed randomly in the arena, all with with pi/2 direction.
#   - "random_near_walls": all robots are placed randomly, as close as possible to the walls to the arena, with random direction.
#   - "aligned_random_near_walls": all robots are placed randomly, as close as possible to the walls to the arena, all with with pi/2 direction.
#   - "disk": robots are placed uniformly in a disk shape at the center of the arena.
#   - "lloyd": robots are placed randomly with an approximately equi-spaced distribution
#       by running a few iterations of Lloyd’s relaxation (a.k.a. “K-means” on a dense uniform sample).
#       This method assumes all objects/robots have the same radius.
#   - "power_lloyd" (default): Similar approach to "lloyd", but using a weighted approach (Laguerre diagrams)
#       to handle cases where objects/robots do not have the same radius.
#   - "imported": import the (X, Y, angle) coordinates from a csv or feather dataframe specified by parameter "formation_filename".
#       E.g.:
#               formation_filename: "/tmp/data.feather"
#       By default, the coordinates from the csv/feather file will not be rescaled, and must be in the same units as the simulation.
#       As such, a feather file generated from the results of another simulation with the same arena can directly be used: if a 'time' column is present in the
#       dataframe, only the coordinates of agents at t=0s are used. If the coordinates do not originate from a simulation, they may be specified in different
#       units as the simulation: in this case, it is necessary to specify the "imported_formation_min_coords" and "imported_formation_max_coords" to correspond
#       to the lower and upper bounds of the coordinate system. All provided coordinates will then be rescaled to match those of the simulation. E.g.
#               imported_formation_min_coords: [0.0, 0.0]
#               imported_formation_max_coords: [17.0, 17.0]
#       Note that the angle (aka "theta") column is optional: if it is not provided, the angle will be sampled from a [-pi, pi] uniform distribution.
#   - chessboard: robots are placed on a regular grid, with random direction.
#       The distance between each grid point (robot center) specified by the 'chessboard_distance_between_neighbors' parameter.
#       As such, if the distance is enough, the robots will only have max 4 neighbors corresponding to the 4 directions top, left, bottom, right.
#       The "formation_cluster_at_center" parameter (default=true) specifies whether (true) all robots should put as close as possible to the center of the grid (i.e. center of the arena); or (false) if they should just be placed randomly in the grid.
#   - aligned_chessboard: similar to formation "chessboard", but all robots have a pi/2 direction.
initial_formation: random_near_walls # power_lloyd

# In the chessboard formations, the euclidean distance between two connected points of the grid.
chessboard_distance_between_neighbors: 110
# The "formation_cluster_at_center" parameter (default=true) specifies whether (true) all robots should put as close as possible to the center of the grid (i.e. center of the arena); or (false) if they should just be placed randomly in the grid.
formation_cluster_at_center: true

# Whether or not to ignore occlusions (e.g. other robots, focal robot) when computing communication exchanges and neighbors lists
communication_ignore_occlusions: false


# List of objects created in the simulation, by category
objects:
    # An object category containing a single light spot encompassing the entire simulation
    global_light:
        type: static_light  # The light is not active (does not move and does not have a controller)
        geometry: global    # The light involve the entire simulation
        value: 200          # Value of the light between 0 and 32767. Corresponds to the light level detected by the Pogobots (e.g. by the pogobot_photosensors_read function)
        photo_start_at: 1.0 # Whether to enable a photo start (values ≥ 0) and when (in seconds).
                            # A photo start is a short period of time at the beginning of an experiment where the light is changed so that the robots know they should
                            # start their user program in a synchronous manner.
        photo_start_duration: 1.0   # Duration of the photo start period, in seconds
        photo_start_value: 32767    # Light value during the photo start period (between 0 and 32767). Should be very different from the normal value of the light

    # An object category containing the Pogobot robots
    robots:
        type: pogobot       # Category type pertaining to Pogobots
        nb: 50             # Number of objects (Pogobots) in this category
        geometry: disk                  # Pogobots are always disk-shaped
        radius: 26.5                    # In mm

        # Physical properties
        body_linear_damping: 0.3
        body_angular_damping: 0.3
        body_density: 10.0
        body_friction: 0.3
        body_restitution: 0.5

        max_linear_speed: 100.0
        max_angular_speed: 2.0
        linear_noise_stddev: 0
        angular_noise_stddev: 0

        # Communication propeties
        communication_radius: 80.0      # In mm, from each IR emitter. Pogobots typically have 4 IR emitters (front, left, back, right)
        msg_success_rate:
            #type: static # Fixed msg success rate -- do not depend on the density, or message size
            #rate: 0.9
            type: dynamic # Msg success rate follows this formula: "1 / (1 + (alpha * msg_size**beta * p_send**gamma * cluster_size**delta))"
            alpha: 0.000001
            beta: 3.0708
            gamma: 2.3234
            delta: 1.1897


########### Parameters used to directly initialize variables from the C code of the robots ###########
parameters:
    max_speed_frac:    1.0          # Domain: [0, 1]. All linear speeds of the robots are scaled to this value.
    enable_backward_dir: true       # Enable going backward to avoid being stuck to walls
    p_backward: 0.20                # Domain: [0, 1]. Probability of going backward rather going foward

    # Run / tumble statistics  (ms)
    urgency_gain: 1.0               # How much surprise influences the linear speed during the run state: 0.0 means no influence (speed is always max_speed_frac), 1.0 means that the speed depends on the urgency level, i.e. speed=max_speed_frac*U. Domain: [0, 1].
    repeat_frac_thres: 0.85         # Threshold over repeat_frac. Used in nov_cnt computation. Low values translates into early escapes, high values into stickiness (i.e. many repeated contacts with the same neighbors before escaping). Domain: [0, 1].
    iso_min_ids: 2                  # Threshold over n_ids. Used in iso_cnt computation. Determine the number of neighbors needed (<=) so that a robot is not considered isolated. Domain: [0, 255], but very low values are ideal.
    run_law:              levy      # Can be linear, levy (uses levy_alpha) or exponential. All use run_duration_min and run_duration_max.
    run_duration_min:     500
    run_duration_max:     9000
    tumble_duration_min:   100
    tumble_duration_max:   400
    levy_alpha:  1.1                # Lévy exponent. Heavy-tailed → occasional very long hops. Domain: [0, inf]
    # Encounter graph
    encounter_graph_scale: 4.0      # [s] scale of iso_cnt (isolation) and nov_cnt (novelty) counters. Domain: [0, inf]
    # Surprise Parameters
    w_iso: -0.5                     # Weighting factor of the isolation objective in the surprise computation. If 0, the isolation objective is not considered, Negative values correspond to negative weights. Domain: [-1, 1].
    w_nov: 0.5                      # Weighting factor of the novelty objective in the surprise computation. If 0, the novelty objective is not considered, Negative values correspond to negative weights. Domain: [-1, 1].
    use_adaptive_surprise_min: true # If false, surprise_min=surprise_min_0; if true, adapt surprise_min value on each robot automatically
    surprise_min_0: 1.5             # Threshold for escape hop. Domain: [0, inf]
    d_surprise_up: 1.50             # Bump after an escape. Domain: [0, inf]
    d_surprise_down: 0.01           # Leak ΔS per second of inactivity. Domain: [0, inf]
    # Memory & decay
    max_age:   3000                 # Window of remembered IDs
    decay_tau: 4.0                  # Half-life of isolation and novelty counters. Domain: [0, inf]


    ## maximize_coverage_maximize_novelty:
    #use_adaptive_surprise_min: true
    #w_iso: 1.0
    #w_nov: 1.0
    #encounter_graph_scale: 3.0
    #decay_tau: 4.0
    #surprise_min_0: 2.0
    #levy_alpha_g: 1.3
    #urgency_gain: 1.0
    #repeat_frac_thres: 0.85
    #iso_min_ids: 1
    #run_law: levy
    #run_duration_min: 500
    #run_duration_max: 7000
    #tumble_duration_min: 150
    #tumble_duration_max: 400

    ## maximize_coverage_minimize_novelty:
    #use_adaptive_surprise_min: true
    #w_iso: 1.0
    #w_nov: -0.5
    #encounter_graph_scale: 3.5
    #decay_tau: 4.5
    #surprise_min_0: 2.5
    #levy_alpha_g: 1.4
    #urgency_gain: 1.0
    #repeat_frac_thres: 0.85
    #iso_min_ids: 1
    #run_law: levy
    #run_duration_min: 500
    #run_duration_max: 7000
    #tumble_duration_min: 150
    #tumble_duration_max: 400

    ## minimize_coverage_maximize_novelty:
    #use_adaptive_surprise_min: true
    #w_iso: -1.0
    #w_nov: 1.0
    #encounter_graph_scale: 3.0
    #decay_tau: 4.0
    #surprise_min_0: 2.5
    #levy_alpha_g: 1.5
    #urgency_gain: 1.0
    #repeat_frac_thres: 0.85
    #iso_min_ids: 1
    #run_law: levy
    #run_duration_min: 400
    #run_duration_max: 4000
    #tumble_duration_min: 200
    #tumble_duration_max: 600

    ## minimize_coverage_minimize_novelty:
    #use_adaptive_surprise_min: false
    #w_iso: -1.0
    #w_nov: -1.0
    #encounter_graph_scale: 4.0
    #decay_tau: 5.0
    #surprise_min_0: 4.0
    #levy_alpha_g: 1.7
    #urgency_gain: 1.0
    #repeat_frac_thres: 0.85
    #iso_min_ids: 1
    #run_law: exponential
    #run_duration_min: 1000
    #run_duration_max: 9000
    #tumble_duration_min: 400
    #tumble_duration_max: 800

    ## baseline_run_and_tumble:
    #use_adaptive_surprise_min: false
    #w_iso: 0.0
    #w_nov: 0.0
    #encounter_graph_scale: 4.0
    #decay_tau: 5.0
    #surprise_min_0: 9999
    #levy_alpha_g: 1.5
    #urgency_gain: 0.0
    #repeat_frac_thres: 0.85
    #iso_min_ids: 1
    #run_law: exponential
    #run_duration_min: 600
    #run_duration_max: 6000
    #tumble_duration_min: 200
    #tumble_duration_max: 600


# MODELINE "{{{1
# vim:expandtab:softtabstop=4:shiftwidth=4:fileencoding=utf-8
# vim:foldmethod=marker
