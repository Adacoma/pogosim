---

window_width: 600       # In pixels
window_height: 600      # In pixels

arena_file: arenas/square.csv
#arena_file: arenas/arena8.csv
arena_surface: 1.0e6    # In mm²

delete_old_files: true
enable_data_logging: true
data_filename: "frames/data.feather"
enable_console_logging: true
console_filename: "frames/console.txt"
save_data_period: 1.0       # In s
save_video_period: 1.0      # In s
frames_name: "frames/f{:010.4f}.png"

seed: 0
show_communication_channels: false  # In the GUI, can enabled/disabled using F5
show_communication_channels_above_all: false # Flag indicating if the communication channels must be drawn above the objects (true) or below. Can be enabled/disabled using F5
show_lateral_LEDs: true             # In the GUI, can enabled/disabled using F6
show_light_levels: false            # In the GUI, can enabled/disabled using F6
GUI: true

# Time
simulation_time: 500.0     # In s
time_step: 0.01            # In s
GUI_speed_up: 10.0         # How much the visualisation in the GUI should be sped up

initial_formation: random # Can be "random" (all robots are placed randomly in the arena), or "disk" (robots are placed uniformly in a disk shape at the center of the arena)


# List of objects created in the simulation, by category
objects:
    # An object category containing a single light spot encompassing the entire simulation
    global_light:
        type: static_light  # The light is not active (does not move and does not have a controller)
        geometry: global    # The light involve the entire simulation
        value: 200          # Value of the light between 0 and 32767. Corresponds to the light level detected by the Pogobots (e.g. by the pogobot_photosensors_read function)
        photo_start_at: 1.0 # Whether to enable a photo start (values ≥ 0) and when (in seconds). 
                            # A photo start is a short period of time at the beginning of an experiment where the light is changed so that the robots know they should
                            # start their user program in a synchronous manner.
        photo_start_duration: 1.0   # Duration of the photo start period, in seconds
        photo_start_value: 32767    # Light value during the photo start period (between 0 and 32767). Should be very different from the normal value of the light


    # An object category referencing Pogowalls, i.e. LEDs strips fixed on static walls that can send/receive messages, and with a Pogobot head/controller
    walls:
        type: pogowall      # Category type for Pogowalls
        geometry: arena     # Shape of the object. "Arena" means it will use the walls of the entire arena specified by "arena_file" (cf top of config file)
        communication_radius: 50.0  # The communication ratius of the Pogowalls, in mm
        msg_success_rate:
            type: static # Fixed msg success rate -- do not depend on the density, or message size
            rate: 0.9
            #type: dynamic # Msg success rate follows this formula: "1 / (1 + (alpha * msg_size**beta * p_send**gamma * cluster_size**delta))"
            #alpha: 0.000004
            #beta: 2.8096
            #gamma: 2.3807
            #delta: 1.2457


    # An object category describing membranes, a special type of Pogowalls apposed on flexible membranes
    membranes:
        type: membrane        # Category type for membranes
        nb: 1                 # Number of membranes to create
        geometry: disk        # Initial geometry of the membranes -- they are flexible, so the shape will change during the simulation. Can be "disk" or "rectangle"
        colormap: qualitative # Colormap used to assign a random color to the object. Can be "rainbow" or "qualitative"

        x: 500      # X coordinate of the center of the create membrane, in mm
        y: 500      # Y coordinate of the center of the create membrane, in mm

        radius: 250             # In mm, if geometry is a disk
        #body_width: 400        # In mm, if geometry is a rectangle
        #body_height: 400       # In mm, if geometry is a rectangle

        # Membrane dots and joints
        num_dots: 40            # Number of dots of the membrane, i.e. of disk-shaped elements.
                                # Only the dots are used to handle collisions in membranes, so the number should be enough
                                # (elsewise robots can pass through the membrane)
        dot_radius: 20          # Radius of the dots, in mm
        cross_span: 1           # Connect every i‑th neighbour to stiffen the sheet (if > 1)

        communication_radius: 50.0  # The communication ratius of the membrane, in mm
        msg_success_rate:
            type: static # Fixed msg success rate -- do not depend on the density, or message size
            rate: 0.9
            #type: dynamic # Msg success rate follows this formula: "1 / (1 + (alpha * msg_size**beta * p_send**gamma * cluster_size**delta))"
            #alpha: 0.000004
            #beta: 2.8096
            #gamma: 2.3807
            #delta: 1.2457

        # Physical properties
        body_linear_damping: 0.3
        body_angular_damping: 0.3
        body_density: 10.0
        body_friction: 0.3
        body_restitution: 0.5

        max_linear_speed: 100.0
        max_angular_speed: 1.0
        linear_noise_stddev: 0.5
        angular_noise_stddev: 2.0


    # An object category containing the Pogobot robots
    robots:
        type: pogobot       # Category type pertaining to Pogobots
        nb: 150             # Number of objects (Pogobots) in this category
        geometry: disk                  # Pogobots are always disk-shaped
        radius: 26.5                    # In mm

        # Physical properties
        body_linear_damping: 0.3
        body_angular_damping: 0.3
        body_density: 10.0
        body_friction: 0.3
        body_restitution: 0.5

        max_linear_speed: 100.0
        max_angular_speed: 2.0
        linear_noise_stddev: 0
        angular_noise_stddev: 0

        # Communication propeties
        communication_radius: 80.0      # In mm, from each IR emitter. Pogobots typically have 4 IR emitters (front, left, back, right)
        msg_success_rate:
            #type: static # Fixed msg success rate -- do not depend on the density, or message size
            #rate: 0.9
            type: dynamic # Msg success rate follows this formula: "1 / (1 + (alpha * msg_size**beta * p_send**gamma * cluster_size**delta))"
            alpha: 0.000004
            beta: 2.8096
            gamma: 2.3807
            delta: 1.2457


########### Parameters used to directly initialize variables from the C code of the robots ###########
parameters:
    # Configuration parameters for the run_and_tumble example
    run_duration_min: 100
    run_duration_max: 2000
    tumble_duration_min: 100
    tumble_duration_max: 1100
    test_vect: [42., 23., 11., 18.]

# MODELINE "{{{1
# vim:expandtab:softtabstop=4:shiftwidth=4:fileencoding=utf-8
# vim:foldmethod=marker
